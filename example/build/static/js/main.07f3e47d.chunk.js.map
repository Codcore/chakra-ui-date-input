{"version":3,"sources":["../../src/functions.ts","../../src/index.tsx","components/SimpleComponent.tsx","App.tsx","index.tsx"],"names":["daysMap","monthMap","getDayDetails","args","date","day","prevMonth","prevYear","prevMonthNumberOfDays","getNumberOfDays","_date","month","timestamp","Date","dayString","year","getMonthDetails","firstDay","numberOfDays","monthArray","currentDay","index","row","col","todayTimestamp","getTimezoneOffset","DatePicker","props","onChange","dateFormat","rest","useState","setYear","setMonth","monthDetails","setMonthDetails","selectedDay","setSelectedDay","inputRef","createRef","color","useColorModeValue","isCurrentDay","isSelectedDay","onDateClick","dateObject","dayjs","getDateStringFromTimestamp","setYearAction","offset","setMonthAction","_year","_month","w","type","ref","children","h","p","variant","onClick","icon","align","size","m","fontWeight","as","py","margin","Math","getMonthStr","React","templateColumns","gap","key","i","d","disabled","backgroundColor","SimpleComponent","toggleMode","useColorMode","toggleColorMode","text","bg","SwitchIcon","MoonIcon","SunIcon","alignContent","direction","placeholder","name","console","log","fontSize","borderRadius","aria-label","colorScheme","ml","base","md","language","showLineNumbers","wrapLines","theme","purebasic","dracula","className","href","data-icon","data-size","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.07f3e47d.chunk.js","sourcesContent":["/**\n *  Core\n */\n\nexport const daysMap = [\n  'Sunday',\n  'Monday',\n  'Tuesday',\n  'Wednesday',\n  'Thursday',\n  'Friday',\n  'Saturday'\n]\nexport const monthMap = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December'\n]\n\nexport const getDayDetails = (args: any) => {\n  const date = args.index - args.firstDay\n  const day = args.index % 7\n  let prevMonth = args.month - 1\n  let prevYear = args.year\n  if (prevMonth < 0) {\n    prevMonth = 11\n    prevYear--\n  }\n  const prevMonthNumberOfDays = getNumberOfDays(prevYear, prevMonth)\n  const _date =\n    (date < 0 ? prevMonthNumberOfDays + date : date % args.numberOfDays) + 1\n  const month = date < 0 ? -1 : date >= args.numberOfDays ? 1 : 0\n  const timestamp = new Date(args.year, args.month, _date).getTime()\n  return {\n    date: _date,\n    day,\n    month,\n    timestamp,\n    dayString: daysMap[day]\n  }\n}\n\nexport const getNumberOfDays = (year: number, month: number) => {\n  return 40 - new Date(year, month, 40).getDate()\n}\n\nexport const getMonthDetails = (year: number, month: number) => {\n  //\n  const firstDay = new Date(year, month).getDay()\n  const numberOfDays = getNumberOfDays(year, month)\n  const monthArray = []\n  const rows = 6\n  let currentDay = null\n  let index = 0\n  const cols = 7\n\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < cols; col++) {\n      currentDay = getDayDetails({\n        index,\n        numberOfDays,\n        firstDay,\n        year,\n        month\n      })\n      monthArray.push(currentDay)\n      index++\n    }\n  }\n  return monthArray\n}\n\nexport const getDateFromDateString = (dateValue: string) => {\n  const dateData = dateValue.split('-').map((d) => parseInt(d, 10))\n  if (dateData.length < 3) return null\n\n  const year = dateData[0]\n  const month = dateData[1]\n  const date = dateData[2]\n  return { year, month, date }\n}\n\nexport const getMonthStr = (month: number) =>\n  monthMap[Math.max(Math.min(11, month), 0)] || 'Month'\n","/* eslint-disable no-unused-vars */\nimport {\n  ArrowLeftIcon,\n  ArrowRightIcon,\n  ChevronDownIcon,\n  ChevronLeftIcon,\n  ChevronRightIcon\n} from '@chakra-ui/icons'\nimport {\n  InputProps as ChakraInputProps,\n  Menu,\n  MenuButton,\n  Button,\n  MenuList,\n  Input,\n  InputGroup,\n  InputRightElement,\n  Text,\n  Box,\n  Grid,\n  Center,\n  HStack,\n  IconButton,\n  VStack,\n  Heading,\n  useColorModeValue\n} from '@chakra-ui/react'\nimport React, { useState, createRef } from 'react'\nimport { daysMap, getMonthDetails, getMonthStr } from './functions'\nimport dayjs from 'dayjs'\n\nconst oneDay = 60 * 60 * 24 * 1000\nconst todayTimestamp =\n  Date.now() -\n  (Date.now() % oneDay) +\n  new Date().getTimezoneOffset() * 1000 * 60\n\nexport interface IDatePickerProps extends Omit<ChakraInputProps, 'onChange'> {\n  dateFormat?: string\n  onChange: (date: string) => void\n}\n\nexport const DatePicker = (props: IDatePickerProps) => {\n  const { onChange, dateFormat = 'DD/MM/YYYY', ...rest } = props\n  const date = new Date()\n  const [year, setYear] = useState(date.getFullYear())\n  const [month, setMonth] = useState(date.getMonth())\n  const [monthDetails, setMonthDetails] = useState(getMonthDetails(year, month))\n  const [selectedDay, setSelectedDay] = useState<number>()\n  const inputRef = createRef<HTMLInputElement>()\n  const color = useColorModeValue('gray', 'white')\n  const isCurrentDay = (day: any) => {\n    return day.timestamp === todayTimestamp\n  }\n  const isSelectedDay = (day: any) => {\n    return day.timestamp === selectedDay\n  }\n\n  const getDateStringFromTimestamp = (timestamp: number) => {\n    const dateObject = new Date(timestamp)\n    const month = dateObject.getMonth() + 1\n    const date = dateObject.getDate()\n    return dayjs(\n      dateObject.getFullYear() +\n        '-' +\n        (month < 10 ? '0' + month : month) +\n        '-' +\n        (date < 10 ? '0' + date : date)\n    ).format(dateFormat)\n  }\n\n  const onDateClick = (day: any) => {\n    setSelectedDay(day.timestamp)\n    if (inputRef.current) {\n      inputRef.current.value = getDateStringFromTimestamp(day.timestamp)\n      onChange(inputRef.current.value)\n    }\n  }\n\n  const setYearAction = (offset: number) => {\n    setYear(year + offset)\n    setMonthDetails(getMonthDetails(year + offset, month))\n  }\n\n  const setMonthAction = (offset: number) => {\n    let _year = year\n    let _month = month + offset\n    if (_month === -1) {\n      _month = 11\n      _year--\n    } else if (_month === 12) {\n      _month = 0\n      _year++\n    }\n    setYear(_year)\n    setMonth(_month)\n    setMonthDetails(getMonthDetails(_year, _month))\n  }\n  return (\n    <Menu {...rest}>\n      <MenuButton w='100%' type='button'>\n        <InputGroup>\n          <Input color={color} ref={inputRef} {...rest} />\n          <InputRightElement children={<ChevronDownIcon w={5} h={5} />} />\n        </InputGroup>\n      </MenuButton>\n      <MenuList>\n        <Center p={3}>\n          <HStack>\n            <IconButton\n              variant='ghost'\n              aria-label='datepicker left button'\n              onClick={() => setYearAction(-1)}\n              icon={<ArrowLeftIcon color={color} />}\n            />\n            <IconButton\n              variant='ghost'\n              aria-label='datepicker left button'\n              onClick={() => setMonthAction(-1)}\n              icon={<ChevronLeftIcon color={color} />}\n            />\n            <VStack align='center'>\n              <Button variant='ghost' size='none'>\n                <Heading color={color} m={0} fontWeight={200} as='h5'>\n                  {year}\n                </Heading>\n              </Button>\n              <Button\n                variant='ghost'\n                size='none'\n                py='0px'\n                color={color}\n                margin='0px !important'\n              >\n                {getMonthStr(month).toUpperCase()}\n              </Button>\n            </VStack>\n            <IconButton\n              variant='ghost'\n              aria-label='datepicker right button'\n              color={color}\n              onClick={() => setMonthAction(1)}\n              icon={<ChevronRightIcon />}\n            />\n            <IconButton\n              variant='ghost'\n              aria-label='datepicker right button'\n              color={color}\n              onClick={() => setYearAction(1)}\n              icon={<ArrowRightIcon />}\n            />\n          </HStack>\n        </Center>\n        <Box p={3}>\n          <Grid align='center' templateColumns='repeat(7, 1fr)' gap={3}>\n            {daysMap.map((d, i) => (\n              <Text color={color} key={i} w='100%'>\n                {d.substring(0, 3).toLocaleUpperCase()}\n              </Text>\n            ))}\n          </Grid>\n        </Box>\n        <Box p={3}>\n          <Grid templateColumns='repeat(7, 1fr)' gap={3}>\n            {monthDetails.map((day, index) => {\n              return (\n                <Button\n                  disabled={day.month !== 0}\n                  color={color}\n                  backgroundColor={\n                    isCurrentDay(day)\n                      ? 'gray.800'\n                      : isSelectedDay(day) && day.month === 0\n                      ? 'gray.800'\n                      : ''\n                  }\n                  variant='ghost'\n                  size='sm'\n                  key={index}\n                  onClick={() => onDateClick(day)}\n                >\n                  {day.date}\n                </Button>\n              )\n            })}\n          </Grid>\n        </Box>\n      </MenuList>\n    </Menu>\n  )\n}\n","import * as React from 'react'\nimport { DatePicker } from 'chakra-ui-date-input'\nimport {\n  Box,\n  Center,\n  VStack,\n  IconButton,\n  useColorMode,\n  useColorModeValue,\n  Text\n} from '@chakra-ui/react'\nimport { MoonIcon, SunIcon } from '@chakra-ui/icons'\nimport { CodeBlock, dracula, purebasic } from 'react-code-blocks'\n\nconst code = ` <DatePicker\n  placeholder='Date picker placeholder'\n  name='date'\n  onChange={(date: string) => console.log(date)}\n/>`\n\nexport default function SimpleComponent() {\n  const { toggleColorMode: toggleMode } = useColorMode()\n  const text = useColorModeValue('dark', 'light')\n  const bg = useColorModeValue('gray', 'white')\n  const SwitchIcon = useColorModeValue(MoonIcon, SunIcon)\n\n  return (\n    <Center h='100vh' color='white'>\n      <Box w='420px' h='100px'>\n        <VStack align='center' alignContent='center' gap={8} direction='column'>\n          <DatePicker\n            placeholder='Date picker placeholder'\n            name='date'\n            onChange={(date: string) => console.log(date)}\n          />\n          <IconButton\n            size='md'\n            fontSize='md'\n            borderRadius='full'\n            aria-label={`Switch to ${text} mode`}\n            variant='ghost'\n            colorScheme={bg}\n            ml={{ base: '0', md: '3' }}\n            onClick={toggleMode}\n            icon={<SwitchIcon color={bg} />}\n          />\n          <Text>How to use it </Text>\n          <Box>\n            <CodeBlock\n              text={code}\n              language='jsx'\n              showLineNumbers\n              wrapLines\n              theme={text === 'dark' ? purebasic : dracula}\n            />\n          </Box>\n          <Box>\n            <a\n              className='github-button'\n              href='https://github.com/ericmaro/chakra-ui-date-input'\n              data-icon='octicon-star'\n              data-size='large'\n              aria-label='Star ericmaro/chakra-ui-date-input on GitHub'\n            >\n              Star\n            </a>\n          </Box>\n        </VStack>\n      </Box>\n    </Center>\n  )\n}\n","import React from 'react'\n\nimport 'chakra-ui-date-input/dist/index.css'\nimport { ChakraProvider, theme } from '@chakra-ui/react'\nimport SimpleComponent from './components/SimpleComponent'\n\nconst App = () => {\n  return (\n    <ChakraProvider theme={theme}>\n      <SimpleComponent />\n    </ChakraProvider>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}